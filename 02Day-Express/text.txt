Contents:
What is express 
API methods - GET, POST, PUT, DELETE
Request & response objects 
Url  &  Query parameters

Express:

we're going to start learning about one of the most popular NPM libraries-That is Express

Express makes it really easy to create web servers with node these servers are going to allow us to serve up all of the assets for our web application

This includes 
HTML=>to render to the screen 
CSS=>to style our application
client side JavaScript=>so we can set up all sorts of awesome user interaction 

now using Express,We're also going to be able to serve up JSON data

Today, we're going to create and run your very first nodeJS based server

This is going to offer users an entirely new way to interact with your applications instead of needing to run commands from the terminal to interact with your app.We'll be able to visit a URL and by the end of this session ,you can visit in the browser to interact with your NodeJS application with the node server.

This would include HTML documents CSS files to style the page client side JavaScript and maybe some images

Express is one of the original NPM packages and it's one of my favorite express definitely helped put no JSA on the map back in the day because it made it so easy to create web servers whether you wanted to serve up something like a static website or whether you wanted to create a complex HTTP JSON based API to serve as the backend for something like a mobile or web application.

First, is to get an basic server up and running.
Lets start
npm init -y
npm i express
Create a folder src
> WE will stay more organized so we are doing it.
src> app.js

Now,
It would be nice if we could write our HDL in separate H2 CML files and have the express server serve those up and we can.
So what we're gonna do is configure express to serve up an entire directory of assets that could contain HTML files CSS s files client side JavaScript videos images and more.
So let's go ahead and start this process off.

let's create the directory
>public
    >index.html and other assests files

index.html=> create a very basic HTML file and it will be served by default.
So this is the page that will eventually show up at the root of our Web site.

Use EmmetAbrevation and create a basic template.
<h1></h1>
So now we have this basic HTML document in the public folder.

How we serve up the contents of that directory

And one important piece of information we need is the path to the public folder.And it can be a relative path.
It needs to be an absolute path from the route of the machine.

Node helps us to  provides us with two very handy variables
Lets discuss about that which we will actually integrate them into the application.

console.log(__dirname)
    The first one __dirname that contains a path to the directory.

console.log(__filename)
    This is very similar to dirname though instead of providing the path to the directory the file lives in it provides the path to the file itself.

Let us see one more core node module of NodeJS
    >Path
    >we can get this is in NodeJS documentation as Well
    >provides us a ton of great utilities for working with paths
    >path now path provides us with a couple of methods that makes it easy to manipulate string paths
Let's go ahead and see how it works over in visual studio code.

After this
const publicDirectory=path.join(__dirname,"../public")

app.use(express.static(publicDirectory))
So this is the contents of our HTML file which we set up in the public folder.


Challenge TIme:
Create 2 more HTML files
1-About page
2-Help page
3-Remove old routtes
4-Visit the browser and test the work

Just create 2 files automatically, in the browser we will get the access to it.

Create 
Css > styles.css
JS  >app.js
Img 
Folder in public

Configure and complete the desigining of it.


Here we are going to create our own API endpoints.
Also we will learn how to access them with the browser.

Backend:
We know, how to take an address and convert it into forecast.

Frontend:
We know, how to get our application running in our browser.

Question is , how we would integrate this two.

Before we move ahead, let us understand about the Query String.
Query String:

The goal is to allow users to be able to fetch a forecast for their location from the weather Web site.
So instead of someone running a command from the terminal to get the forecast they'll be able to pull up a you are all in the browser here they'll see a form they type their address into an input they click a button and a few hundred milliseconds later their weather information shows up.

So we will be using /waether route to do so.

weather route needs to know what address it should geo code and fetch the forecast for to get that done and we'll use a query string.

So the browser is going to provide a query string as part of the URL and server will then read the query string value to get the address information

Now you've already worked with query strings before you'll remember that we used them with the geo coding API over in weather app.

We will copy paste the utilis directory from yesterday class.

So lets go and check again geocode.js file.

before moving ahead, we will do 1 example.
where we create an endpoint /products and see whether its working on not.

If we want to implement an search we have to use query string.

querystring

/?key=value&rating=5
/?serach=games&rating=5

And the question is how does the server actually get that information.
Now this information it's available to us inside of our Express route handler.

req.query
query which we are passing.
req.query.serach
req.query.rating

npm i request
as we copy pasted the utilis folder.




