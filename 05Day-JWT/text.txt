Authentication and data security:
Password:
we take the password in from the user and we store it in the database exactly as they typed or provided
This is known as storing the password in plain text and for passwords.This is a terrible idea.

Now the problem with storing plain text passwords is that most users use these same password for multiple accounts.
So let's say our database did get hacked.
Sure someone would be able to access the task data for all of the users.
So Someone could try to use these same credentials for online banking and email a PayPal account or something
So we don't want to store the password in plain text because we are leaving users exposed to further problems.
it's our job as developers to do our best to keep things secure in a world where we don't have complete So the solution is to store not a plain text a password but a hashed password the hashed value is going to look nothing like the plain text password.

And if someone was to hack the database and get a hold of all of the users hashed passwords they would be useless because the algorithm we're going to use to generate it is not reversible.

we can get access to an implementation of the Bcrypt algorithm in our nodejs code by installing
and using an NPM module.

So lets install it.

npm i bycryptjs

Its a super popular library and it's going to give us a few functions we can use to securely store and work with passwords.

Intergration of Passwordhashing in TaskManager App.

Create User route
Post users this is when a user is created and it's impossible to create a user without providing a password.
So when someone is signing up we definitely want to make sure to hash that plaintext password.

Update User route
When a user is updated now they could be updated and have the password stay the same.Then maybe just update the name.
But there is a chance that a new password is provided and if it is provided we want to make sure we hash it.

For using this,we have to customize our User model

Mongoose supports middleware
middleware as a way to customize the behavior of your Mongoose model and it's going to allow us to do some pretty interesting things to explore this.

Let's head over to the Mongoose documentation and under guides we have a middleware 

with middleware,we can register some functions to run before or after given events occur.

So for example validate.I could run some code just before or just after a user is validated.

Okay....

I could also run some code just before or just after a user is saved and we have other events down below as well.
In our case we want to focus on Save Our job is to run some code just before a user is saved.

We're gonna check if there's a plain text password and if there is we'll go ahead and hash it.

Now to actually get this done we'll need to head over to the user model and do a little bit of restructuring to take advantage of this more advanced feature.

Lets do it.

Step1: Create the schema
Step2: Pass it to the model
Step3: on the createdSchema, use pre or post depending upon the scenario/requirement.
We will using pre 

//This is done

login
We will provide new endpoint that will allow them to login with their existing account 
so they'll have to provide their credentials their email and password 
and it will be the job of that route to verify that there is a user with those credentials.


1-Set up an New Route.
2-Create an resuable function for finding a user by their credentials by their email and password in UserModel.

After this we have to make someone login , verify email and password and then only create the task.

Singlt express Router will fall into 2 categories.
public >> Rest all the Routes.(Everyone can access)
private >> Signup and Login Route (Which requires authentication)

What we need to do is set up the log in request to send back and authentication token.

So I could log in with my account I'd get the token back then I could go off and edit my user profile or do something else like create a new task.
we're going to create and manage those authentication tokens.

For this, we have to use JSON Web token ie. JWT
It can be used for all sorts of things including authentication and with JWTs we'll be able to setup everything we want for our little authentication system.
tokens expire after a certain amount of time 

So let us Install JWT.
npm i jsonwebtoken

Generating JSON WEBTOKEN:
=>log in end point
=>Generate a JSON Web token and send it back to the user
=>the exact same thing for signing up
=>both of these requests are going to end up sending back JWT authentication tokens.
=>we'll create another function we can reuse whenever we need to generate an authentication token
=>because we would need not duplicate at both places.
=>we're going to create a function that returns the token in that token will get sent to the user.
=>create that function to return a promise.
=>we will use await to actually get the token back since that function is going to do asynchronous things.
Login Route:
In this case though we're trying to generate a token for a very specific user.

Steps:



SignUp Also 
Create user Route:


Express Middleware:
=>API is sending back authentication tokens When users sign up or log in
=>how those tokens are gonna be used to actually authenticate other requests
=>every single request to the API is going to require authentication with the exception of sign up and log in for everything 
=>else the client is going to need to provide that authentication token

Express middleware:
which is going to be at the core of allowing us to get all of this done to get started.

//Till now we did this
So the new request comes in Express maps to the correct route and that function gets executed.

Without Middleware=> new request => run route handler

With Middleware=> new request => do Something => run route handler
    -Now with middleware we can customize the behavior of the server to fit our needs
    -There's a step added in the middle so we still have a new request coming into the express server but then we do something now.
    -This something is nothing more than a function that runs and we can set up this function to do whatever we'd like.
    -Maybe we want to log out some statistics about their request so we can keep track of it in our server logs or maybe we want to check if there is a valid authentication token.
    -Now once the middleware runs we can continue to choose to run the regular route handler so the given operation is completed successfully.

express middleware should be above all the app.use()
app.use()// this should be first line

Register an Middleware 







